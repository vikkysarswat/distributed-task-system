version: '3.8'

services:
  # API Service
  api:
    build: .
    ports:
      - "8000:8000"
      - "8001:8001"  # Metrics port
    environment:
      - DATABASE_URL=postgresql+asyncpg://taskuser:taskpass@postgres:5432/taskdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    networks:
      - task-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  worker:
    build: .
    command: celery -A src.worker.celery_app worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=postgresql+asyncpg://taskuser:taskpass@postgres:5432/taskdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - task-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # High Priority Worker
  worker-high:
    build: .
    command: celery -A src.worker.celery_app worker --loglevel=info --concurrency=2 --queues=high_priority
    environment:
      - DATABASE_URL=postgresql+asyncpg://taskuser:taskpass@postgres:5432/taskdb
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
    networks:
      - task-network
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=taskdb
      - POSTGRES_USER=taskuser
      - POSTGRES_PASSWORD=taskpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - task-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskuser -d taskdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - task-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - task-network
    restart: unless-stopped

  # Message Queue Management UI
  flower:
    build: .
    command: celery -A src.worker.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    depends_on:
      - redis
    networks:
      - task-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  task-network:
    driver: bridge